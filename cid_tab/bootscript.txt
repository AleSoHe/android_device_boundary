setenv distro_bootpart 1

setexpr rval *0x020CC068 \& 0x180
if itest.s "x$rval" -eq "x100"; then
	echo "Starting fastboot..."
	fastboot 0
else
	if itest.s "x$rval" -eq "x80"; then
		setenv distro_bootpart 2;
	fi
fi
mw.l 0x020cc068 0 1

setenv bootargs ''

m4=''
a_base=0x10000000
if itest.s x51 == "x${cpu}" ; then
	a_base=0x90000000
elif itest.s x53 == "x${cpu}"; then
	a_base=0x70000000
elif itest.s x6SX == "x${cpu}" || itest.s x7D == "x${cpu}"; then
	a_base=0x80000000
	if itest.s "x1" == "x$m4enabled" ; then
		run m4boot;
		m4='-m4';
	fi
fi

setexpr a_script  ${a_base} + 0x00800000
setexpr a_zImage  ${a_base} + 0x00800000
setexpr a_fdt     ${a_base} + 0x03000000
setexpr a_ramdisk ${a_base} + 0x03800000

if load ${devtype} ${devnum}:${distro_bootpart} ${a_script} uEnv.txt ; then
    env import -t ${a_script} ${filesize}
fi

if itest.s "x" == "x${board}" ; then
	echo "!!!! Error: Your u-boot is outdated. Please upgrade.";
	exit;
fi

if itest.s "x" == "x${fdt_file}" ; then
	if itest.s x6SOLO == "x${cpu}" ; then
		fdt_file=imx6dl-${board}.dtb;
	elif itest.s x6DL == "x${cpu}" ; then
		fdt_file=imx6dl-${board}.dtb;
	elif itest.s x6QP == "x${cpu}" ; then
		fdt_file=imx6qp-${board}.dtb;
	elif itest.s x6SX == "x${cpu}" ; then
		fdt_file=imx6sx-${board}${m4}.dtb;
	elif itest.s x7D == "x${cpu}" ; then
		fdt_file=imx7d-${board}${m4}.dtb;
	elif itest.s x51 == "x${cpu}" ; then
		fdt_file=imx51-${board}${m4}.dtb;
	elif itest.s x53 == "x${cpu}" ; then
		fdt_file=imx53-${board}${m4}.dtb;
	else
		fdt_file=imx6q-${board}.dtb;
	fi
fi

offset=0x400
erase_size=0xC0000
setexpr a_uboot1 ${a_base} + 0x00800000
setexpr a_uboot2 ${a_base} + 0x01000000
if ${fs}load ${devtype} ${devnum}:1 ${a_uboot1} u-boot.$uboot_defconfig ; then
	sf probe ;
	if sf read ${a_uboot2} $offset $filesize ; then
		if cmp.b ${a_uboot1} ${a_uboot2} $filesize ; then
		else
			echo "Updating U-Boot...";
			sf erase 0 ${erase_size} ;
			sf write ${a_uboot1} $offset $filesize ;
		fi
	fi
fi

if load ${devtype} ${devnum}:${distro_bootpart} ${a_fdt} ${prefix}${fdt_file} ; then
	fdt addr ${a_fdt}
	setenv fdt_high 0xffffffff
else
	echo "!!!! Error loading ${prefix}${fdt_file}";
	exit;
fi

if itest.s "x" != "x${cmd_custom}" ; then
	run cmd_custom
fi

# ------------------- Displays detection
if itest.s "x" != "x${cmd_hdmi}" ; then
	run cmd_hdmi
	if itest.s x == x${allow_noncea} ; then
		setenv bootargs ${bootargs} mxc_hdmi.only_cea=1;
		echo "only CEA modes allowed on HDMI port";
	else
		setenv bootargs ${bootargs} mxc_hdmi.only_cea=0;
		echo "non-CEA modes allowed on HDMI, audio may be affected";
	fi
fi
if itest.s "x" != "x${cmd_lcd}" ; then
	run cmd_lcd
fi
if itest.s "x" != "x${cmd_lvds}" ; then
	run cmd_lvds
fi

setenv bootargs "$bootargs console=${console},115200 vmalloc=128M consoleblank=0 rootwait"
setenv bootargs $bootargs androidboot.hardware=freescale

if itest.s "xsata" == "x$devtype" ; then
	bootdev=sda
elif itest.s "xusb" == "x$devtype" ; then
	bootdev=sda
else
	bootdev=mmcblk${devnum}
fi
setenv bootargs $bootargs androidboot.bootdev=$bootdev

if itest.s "xenforcing" != "x$selinux" ; then
	setenv bootargs $bootargs androidboot.selinux=permissive
fi

if itest.s "x" != "x${serial#}" ; then
	setenv bootargs $bootargs androidboot.serialno="${serial#}"
else
	# add serial number based on MAC address
	setexpr mac_hi *0x021bc630
	setexpr mac_lo *0x021bc620
	setenv bootargs $bootargs androidboot.serialno="$mac_hi$mac_lo"
fi

if itest.s "x" != "x${loglevel}" ; then
	setenv bootargs ${bootargs} loglevel=${loglevel}
else
	setenv bootargs ${bootargs} quiet
fi

if itest.s "x" != "x$hwrotation" ; then
	setenv bootargs $bootargs androidboot.hwrotation=$hwrotation
fi

if itest.s "x" != "x$disable_giga" ; then
        setenv bootargs $bootargs fec.disable_giga=1
fi

if itest.s "x" != "x$wlmac" ; then
	setenv bootargs $bootargs androidboot.wlan.mac=$wlmac
	# create a bt mac address from the wlan one
	setexpr btmac sub "(..:..:..:).(.*)" "\\1b\\2" ${wlmac}
	setenv bootargs $bootargs androidboot.btmacaddr=${btmac}
fi

if itest.s "x" == "x$cma" ; then
	cma=448M
fi
setenv bootargs $bootargs cma=$cma

if itest.s "x" != "x$gpumem" ; then
	setenv bootargs $bootargs galcore.contiguousSize=$gpumem
fi

if itest.s "x" != "x$show_fdt" ; then
	fdt print /
fi

if itest.s "x" != "x$show_env" ; then
	printenv
fi

if ${fs}load ${devtype} ${devnum}:${distro_bootpart} ${a_zImage} zImage ; then
	if ${fs}load ${devtype} ${devnum}:${distro_bootpart} ${a_ramdisk} uramdisk.img ; then
		bootz ${a_zImage} ${a_ramdisk} ${a_fdt} ;
	fi
fi

echo "Error loading the OS"
