setenv bootargs enable_wait_mode=off
setenv nextcon 0;
setenv bootargs $bootargs console=ttymxc1,115200 vmalloc=400M consoleblank=0 ;
setenv bootpart 1

setexpr rval *0x020CC068 \& 0x180
if itest.s "x$rval" -eq "x100"; then
	echo "----------- run fastboot here";
else
	if itest.s "x$rval" -eq "x80"; then
		setenv bootpart 2;
	fi
fi

mw.l 0x020cc068 0 1

if test -n "$tempfuse" ; then
	setenv bootargs $bootargs thermal.fuse_override=$tempfuse
fi

if itest.s "x" != "x$wlmac" ; then
        setenv bootargs $bootargs wl12xx.mac=$wlmac
fi

i2c dev 2
if itest.s "x$panel" == "xLG-10.1" ; then
	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,1280x800MR@60,if=RGB666
	if test "0" -eq $nextcon; then
		setenv fbmem "fbmem=20M";
	else
		setenv fbmem ${fbmem},20M
	fi
	setexpr nextcon $nextcon + 1
else
	if i2c probe 0x04 ; then
		setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,LDB-XGA,if=RGB666
		if test "0" -eq $nextcon; then
			setenv fbmem "fbmem=20M";
		else
			setenv fbmem ${fbmem},20M
		fi
		setexpr nextcon $nextcon + 1
	else
		echo "------ no Freescale display";
	fi

	if i2c probe 0x38 ; then
		if itest.s "xLDB-WXGA" == "x$panel"; then
			setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,1280x800MR@60,if=RGB666
			screenres=1280,800
		else
			setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,1024x600M@60,if=RGB666
			screenres=1024,600
		fi
		if test "0" -eq $nextcon; then
			setenv fbmem "fbmem=20M";
		else
			setenv fbmem ${fbmem},20M
		fi
		setexpr nextcon $nextcon + 1
		setenv bootargs $bootargs ft5x06.screenres=$screenres tsdev=ft5x06
		if itest.s "x" -ne "x$calibration" ; then
			setenv bootargs $bootargs ft5x06.calibration=$calibration
		fi
	else
		if itest.s "xLDB-WXGA" == "x$panel"; then
			setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,1280x800MR@60,if=RGB666
			setexpr nextcon $nextcon + 1
		else
			echo "------ no focaltech display";
                fi
	fi
	if i2c probe 0x41 ; then
                echo "found Ilitek touch controller";
		setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,1024x600M@60,if=RGB666
		if test "0" -eq $nextcon; then
			setenv fbmem "fbmem=20M";
		else
			setenv fbmem ${fbmem},20M
		fi
		setexpr nextcon $nextcon + 1
	fi
fi

if i2c probe 0x48 ; then
	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=lcd,bpp=32,CLAA-WVGA,if=RGB666 tsdev=tsc2004
	if itest.s "x" -eq "x$calibration" ; then
		setenv bootargs $bootargs tsc2004.calibration=-67247,-764,272499173,324,69283,-8653010,65536
	else
		setenv bootargs $bootargs tsc2004.calibration=$calibration
	fi
	if test "0" -eq $nextcon; then
		setenv fbmem "fbmem=20M";
	else
		setenv fbmem ${fbmem},20M
	fi
	setexpr nextcon $nextcon + 1
else
	echo "------ no 800x480 display";
fi

if i2c probe 0x10 ; then
	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=lcd,bpp=32,fusion7,if=RGB666
	if test "0" -eq $nextcon; then
		setenv fbmem "fbmem=10M";
	else
		setenv fbmem ${fbmem},10M
	fi
	setexpr nextcon $nextcon + 1
else
	echo "------ no fusion7 display";
fi

if test "0" -eq $nextcon; then
	# no LVDS or RGB panel found
	if itest.s "xLDB-WXGA-S" == "x$panel"; then
		echo "using WXGA SPWG panel";
		setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,1280x800M@60,if=RGB24
		setenv fbmem "fbmem=10M";
		setexpr nextcon $nextcon + 1
	else
		echo "----- No LVDS/RGB panels defined: $panel" ;
	fi
else
	echo "------------- have " $nextcon " displays defined";
fi

if itest.s "xsvga" == "x$panel"; then
	setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,800x600MR@60,if=RGB666
	setexpr nextcon $nextcon + 1
fi

if test "0" -eq $nextcon ; then
	if itest.s "xLDB-WXGA-S" == "x$panel"; then
		setenv bootargs $bootargs video=mxcfb${nextcon}:dev=ldb,bpp=32,1280x800MR@60,if=RGB24
		setenv bootargs $bootargs usbhid.quirks=0x27c6:0x0004:0x0004
		setexpr nextcon $nextcon + 1
	elif itest.s "x1080P" == "x$panel" ; then
		setenv bootargs $bootargs ldb=spl0 video=mxcfb${nextcon}:dev=ldb,bpp=32,1920x1080MR@60,if=RGB24
		setenv bootargs $bootargs usbhid.quirks=0x27c6:0x0004:0x0004
		setexpr nextcon $nextcon + 1
		setenv fbmem 28M
	elif itest.s "xfusion4" == "x$panel" ; then
		setenv bootargs $bootargs video=mxcfb${nextcon}:dev=lcd,bpp=32,480x272M@60,if=RGB24
		setexpr nextcon $nextcon + 1
		setenv fbmem 8M
        fi
fi

i2c dev 1 ;
if i2c probe 0x50 ; then
        if itest.s "x$panel" == "xHDMI-1080P" ; then
	        setenv bootargs $bootargs video=mxcfb${nextcon}:dev=hdmi,bpp=32,1920x1080M@60,if=RGB24
        else
	        setenv bootargs $bootargs video=mxcfb${nextcon}:dev=hdmi,bpp=32,1280x720M@60,if=RGB24
        fi
        if test "0" -eq $nextcon; then
                setenv fbmem "fbmem=28M";
        else
                setenv fbmem ${fbmem},28M
        fi
	setexpr nextcon $nextcon + 1

        if itest.s x == x$allow_noncea ; then
        	setenv bootargs $bootargs mxc_hdmi.only_cea=1;
        	echo "only CEA modes allowed on HDMI port";
        else
                setenv bootargs $bootargs mxc_hdmi.only_cea=0;
                echo "non-CEA modes allowed on HDMI, audio may be affected";
        fi
else
	echo "------ no HDMI monitor";
fi

while test "4" -ne $nextcon ; do
	setenv bootargs $bootargs video=mxcfb${nextcon}:off ;
	setexpr nextcon $nextcon + 1 ;
done

bootdev=sdhci-esdhc-imx.2
setenv bootargs $bootargs $fbmem androidboot.hardware=freescale
if itest.s "xsata" == "x$dtype" ; then
	bootdev=ahci.0
elif itest.s "xusb" == "x$dtype" ; then
	bootdev=fsl-ehci.1
elif itest.s "xmmc" == "x$dtype" ; then
	if itest 1 == ${disk}; then
		bootdev=sdhci-esdhc-imx.3
	fi
fi

setenv bootargs $bootargs androidboot.bootdev=$bootdev

# add serial number based on MAC address
setexpr mac_hi *0x021bc630
setexpr mac_lo *0x021bc620
setenv bootargs $bootargs androidboot.serialno="$mac_hi$mac_lo"

if itest.s "x" != "x$disable_giga" ; then
        setenv bootargs $bootargs fec.disable_giga=1
fi

kernel=uImage
ramdisk=uramdisk.img

if kbd ; then
        if itest.s "xv" == "x$keybd" ; then
                kernel=uImage-recovery
                ramdisk=uramdisk-recovery.img
        fi
fi

${fs}load ${dtype} ${disk}:$bootpart 10800000 $kernel && ${fs}load ${dtype} ${disk}:$bootpart 12800000 $ramdisk && bootm 10800000 12800000
echo "Error loading kernel image"
